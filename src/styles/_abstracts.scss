/* =====================================================================
  -> MIXINS
===================================================================== */
@mixin fb_text-properties {
  font-weight: normal;
  font-style: normal;
}

@mixin fb_paragraph-small {
  font-size: fn_calculate-rem(14);
  line-height: fn_calculate-lh(19, 14);
}

@mixin fb_paragraph-semibold {
  font-family: var(--font__primary--semibold);
  font-size: fn_calculate-rem(14);
  line-height: fn_calculate-lh(19, 14);
}

@mixin fb_paragraph-bold {
  font-family: var(--font__headings);
  font-size: fn_calculate-rem(16);
  line-height: fn_calculate-lh(23, 16);
}

@mixin fb_container {
  background-color: var(--color__bg--container);
  border-radius: var(--rounded-corners);
  padding: var(--spacer__32);

  @include respond-to('medium--s') {
    padding: var(--spacer__24);
  }

  @include respond-to('small--m') {
    padding: var(--spacer__20);
  }
}

@mixin fb_header-container {
  background-color: var(--color__bg--container);
  border-radius: var(--rounded-corners);
  padding: var(--spacer__24);
}

@mixin fade-animation($name, $startValue, $endValue) {
  @keyframes #{$name} {
    0% {
      opacity: $startValue;
    }
    100% {
      opacity: $endValue;
    }
  }
}

/* =====================================================================
  -> FUNCTIONS
===================================================================== */
/*
  Convert px to rem
  $size = font size value in px
  $rem-default = default rem value
*/
@function fn_calculate-rem($size) {
  $rem-default: 16;
  $rem-size: $size / $rem-default;
  @return #{$rem-size}rem;
}

/*
  Calculate line-height
  $lh = line height value in px
  $size = font size value in px
*/
@function fn_calculate-lh($lh, $size) {
  @return $lh / $size;
}

/*
  Convert rem to px
  $rem = font size value in rem
  $rem-default = default rem value
*/
@function fn_calculate-px($rem) {
  $rem-default: 16;
  $px-size: $rem * $rem-default;
  @return #{$px-size}px;
}

/* =====================================================================
  -> MEDIA QUERY MANAGER
===================================================================== */
/// @param {String} $breakpoint - Breakpoint name
/// @require $breakpoints

$text: 'only screen and';
@mixin respond-to($breakpoint) {
  // If the key exists in the map
  @if map-has-key($breakpoints, $breakpoint) {
    // Prints a media query based on the value
    @media #{$text inspect(map-get($breakpoints, $breakpoint))} {
      @content;
    }
  }

  // If the key doesn't exist in the map
  @else {
    @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "
        + "Available breakpoints are: #{map-keys($breakpoints)}.";
  }
}
